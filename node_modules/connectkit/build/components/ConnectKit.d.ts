import React, { ReactNode } from 'react';
import { CustomTheme, Languages, Mode, Theme, CustomAvatarProps } from '../types';
import { useConnectCallbackProps } from '../hooks/useConnectCallback';
export declare const routes: {
    ONBOARDING: string;
    ABOUT: string;
    CONNECTORS: string;
    MOBILECONNECTORS: string;
    CONNECT: string;
    DOWNLOAD: string;
    PROFILE: string;
    SWITCHNETWORKS: string;
    SIGNINWITHETHEREUM: string;
};
type Connector = any;
type Error = string | React.ReactNode | null;
type ContextValue = {
    theme: Theme;
    setTheme: React.Dispatch<React.SetStateAction<Theme>>;
    mode: Mode;
    setMode: React.Dispatch<React.SetStateAction<Mode>>;
    customTheme: CustomTheme | undefined;
    setCustomTheme: React.Dispatch<React.SetStateAction<CustomTheme | undefined>>;
    lang: Languages;
    setLang: React.Dispatch<React.SetStateAction<Languages>>;
    open: boolean;
    setOpen: React.Dispatch<React.SetStateAction<boolean>>;
    route: string;
    setRoute: React.Dispatch<React.SetStateAction<string>>;
    connector: string;
    setConnector: React.Dispatch<React.SetStateAction<Connector>>;
    errorMessage: Error;
    options?: ConnectKitOptions;
    signInWithEthereum: boolean;
    debugMode?: boolean;
    log: (...props: any) => void;
    displayError: (message: string | React.ReactNode | null, code?: any) => void;
} & useConnectCallbackProps;
export declare const Context: React.Context<ContextValue | null>;
export type ConnectKitOptions = {
    language?: Languages;
    hideBalance?: boolean;
    hideTooltips?: boolean;
    hideQuestionMarkCTA?: boolean;
    hideNoWalletCTA?: boolean;
    hideRecentBadge?: boolean;
    walletConnectCTA?: 'link' | 'modal' | 'both';
    avoidLayoutShift?: boolean;
    embedGoogleFonts?: boolean;
    truncateLongENSAddress?: boolean;
    walletConnectName?: string;
    reducedMotion?: boolean;
    disclaimer?: ReactNode | string;
    bufferPolyfill?: boolean;
    customAvatar?: React.FC<CustomAvatarProps>;
    initialChainId?: number;
    enforceSupportedChains?: boolean;
    ethereumOnboardingUrl?: string;
    walletOnboardingUrl?: string;
    disableSiweRedirect?: boolean;
    overlayBlur?: number;
};
type ConnectKitProviderProps = {
    children?: React.ReactNode;
    theme?: Theme;
    mode?: Mode;
    customTheme?: CustomTheme;
    options?: ConnectKitOptions;
    debugMode?: boolean;
} & useConnectCallbackProps;
export declare const ConnectKitProvider: React.FC<ConnectKitProviderProps>;
export declare const useContext: () => ContextValue;
export {};
