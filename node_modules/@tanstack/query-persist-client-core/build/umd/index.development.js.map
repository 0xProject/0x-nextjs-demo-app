{"version":3,"file":"index.development.js","sources":["../../src/persist.ts","../../src/retryStrategies.ts"],"sourcesContent":["import type {\n  QueryClient,\n  DehydratedState,\n  DehydrateOptions,\n  HydrateOptions,\n} from '@tanstack/query-core'\nimport { dehydrate, hydrate } from '@tanstack/query-core'\nimport type { NotifyEventType } from '@tanstack/query-core'\n\nexport type Promisable<T> = T | PromiseLike<T>\n\nexport interface Persister {\n  persistClient(persistClient: PersistedClient): Promisable<void>\n  restoreClient(): Promisable<PersistedClient | undefined>\n  removeClient(): Promisable<void>\n}\n\nexport interface PersistedClient {\n  timestamp: number\n  buster: string\n  clientState: DehydratedState\n}\n\nexport interface PersistQueryClienRootOptions {\n  /** The QueryClient to persist */\n  queryClient: QueryClient\n  /** The Persister interface for storing and restoring the cache\n   * to/from a persisted location */\n  persister: Persister\n  /** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */\n  buster?: string\n}\n\nexport interface PersistedQueryClientRestoreOptions\n  extends PersistQueryClienRootOptions {\n  /** The max-allowed age of the cache in milliseconds.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */\n  maxAge?: number\n  /** The options passed to the hydrate function */\n  hydrateOptions?: HydrateOptions\n}\n\nexport interface PersistedQueryClientSaveOptions\n  extends PersistQueryClienRootOptions {\n  /** The options passed to the dehydrate function */\n  dehydrateOptions?: DehydrateOptions\n}\n\nexport interface PersistQueryClientOptions\n  extends PersistedQueryClientRestoreOptions,\n    PersistedQueryClientSaveOptions,\n    PersistQueryClienRootOptions {}\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */\nconst cacheableEventTypes: Array<NotifyEventType> = [\n  'added',\n  'removed',\n  'updated',\n]\n\nfunction isCacheableEventType(eventType: NotifyEventType) {\n  return cacheableEventTypes.includes(eventType)\n}\n\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientRestoreOptions) {\n  try {\n    const persistedClient = await persister.restoreClient()\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge\n        const busted = persistedClient.buster !== buster\n        if (expired || busted) {\n          persister.removeClient()\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions)\n        }\n      } else {\n        persister.removeClient()\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err)\n      queryClient\n        .getLogger()\n        .warn(\n          'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.',\n        )\n    }\n    persister.removeClient()\n  }\n}\n\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions),\n  }\n\n  await persister.persistClient(persistClient)\n}\n\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscribe((event) => {\n      if (isCacheableEventType(event.type)) {\n        persistQueryClientSave(props)\n      }\n    })\n\n  const unusbscribeMutationCache = props.queryClient\n    .getMutationCache()\n    .subscribe((event) => {\n      if (isCacheableEventType(event.type)) {\n        persistQueryClientSave(props)\n      }\n    })\n\n  return () => {\n    unsubscribeQueryCache()\n    unusbscribeMutationCache()\n  }\n}\n\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false\n  let persistQueryClientUnsubscribe: (() => void) | undefined\n  const unsubscribe = () => {\n    hasUnsubscribed = true\n    persistQueryClientUnsubscribe?.()\n  }\n\n  // Attempt restore\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props)\n    }\n  })\n\n  return [unsubscribe, restorePromise]\n}\n","import type { PersistedClient } from '@tanstack/query-persist-client-core'\n\nexport type PersistRetryer = (props: {\n  persistedClient: PersistedClient\n  error: Error\n  errorCount: number\n}) => PersistedClient | undefined\n\nexport const removeOldestQuery: PersistRetryer = ({ persistedClient }) => {\n  const mutations = [...persistedClient.clientState.mutations]\n  const queries = [...persistedClient.clientState.queries]\n  const client: PersistedClient = {\n    ...persistedClient,\n    clientState: { mutations, queries },\n  }\n\n  // sort queries by dataUpdatedAt (oldest first)\n  const sortedQueries = [...queries].sort(\n    (a, b) => a.state.dataUpdatedAt - b.state.dataUpdatedAt,\n  )\n\n  // clean oldest query\n  if (sortedQueries.length > 0) {\n    const oldestData = sortedQueries.shift()\n    client.clientState.queries = queries.filter((q) => q !== oldestData)\n    return client\n  }\n\n  return undefined\n}\n"],"names":["cacheableEventTypes","isCacheableEventType","eventType","includes","persistQueryClientRestore","queryClient","persister","maxAge","buster","hydrateOptions","persistedClient","restoreClient","timestamp","expired","Date","now","busted","removeClient","hydrate","clientState","err","getLogger","error","warn","persistQueryClientSave","dehydrateOptions","persistClient","dehydrate","persistQueryClientSubscribe","props","unsubscribeQueryCache","getQueryCache","subscribe","event","type","unusbscribeMutationCache","getMutationCache","persistQueryClient","hasUnsubscribed","persistQueryClientUnsubscribe","unsubscribe","restorePromise","then","removeOldestQuery","mutations","queries","client","sortedQueries","sort","a","b","state","dataUpdatedAt","length","oldestData","shift","filter","q","undefined"],"mappings":"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"}