type BigNumberish = string | number | bigint;
type BytesLike = string | Uint8Array;
type TypedDataDomain = {
    name?: string;
    version?: string;
    chainId?: BigNumberish;
    verifyingContract?: string;
    salt?: BytesLike;
};
type TypedDataField = {
    name: string;
    type: string;
};
type EthersWallet = {
    address: string;
    signMessage(message: Uint8Array): Promise<string>;
    signTransaction(txn: any): Promise<string>;
} & ({
    signTypedData(domain: TypedDataDomain, types: Record<string, TypedDataField[]>, value: Record<string, any>): Promise<string>;
    _signTypedData?: never;
} | {
    signTypedData?: never;
    _signTypedData(domain: TypedDataDomain, types: Record<string, TypedDataField[]>, value: Record<string, any>): Promise<string>;
});
export declare const ethersWalletToAccount: (wallet: EthersWallet) => import("../index.js").LocalAccount;
export {};
//# sourceMappingURL=ethers.d.ts.map