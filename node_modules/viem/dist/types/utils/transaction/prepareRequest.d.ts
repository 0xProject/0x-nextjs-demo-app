import type { Address } from 'abitype';
import type { Account } from '../../accounts/types.js';
import type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js';
import type { PublicClient } from '../../clients/createPublicClient.js';
import type { WalletClient } from '../../clients/createWalletClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { GetAccountParameter } from '../../types/account.js';
import type { Chain } from '../../types/chain.js';
export type PrepareRequestParameters<TAccount extends Account | undefined = undefined> = GetAccountParameter<TAccount> & {
    gas?: SendTransactionParameters['gas'];
    gasPrice?: SendTransactionParameters['gasPrice'];
    maxFeePerGas?: SendTransactionParameters['maxFeePerGas'];
    maxPriorityFeePerGas?: SendTransactionParameters['maxPriorityFeePerGas'];
    nonce?: SendTransactionParameters['nonce'];
};
export type PrepareRequestReturnType<TAccount extends Account | undefined = undefined, TParameters extends PrepareRequestParameters<TAccount> = PrepareRequestParameters<TAccount>> = TParameters & {
    from: Address;
    gas: SendTransactionParameters['gas'];
    gasPrice?: SendTransactionParameters['gasPrice'];
    maxFeePerGas?: SendTransactionParameters['maxFeePerGas'];
    maxPriorityFeePerGas?: SendTransactionParameters['maxPriorityFeePerGas'];
    nonce: SendTransactionParameters['nonce'];
};
export declare const defaultTip = 1500000000n;
export declare function prepareRequest<TChain extends Chain | undefined, TAccount extends Account | undefined, TParameters extends PrepareRequestParameters<TAccount>>(client: WalletClient<Transport, TChain, TAccount> | PublicClient<Transport, TChain>, args: TParameters): Promise<PrepareRequestReturnType<TAccount, TParameters>>;
//# sourceMappingURL=prepareRequest.d.ts.map