import type { Chain } from '../../types/chain.js';
import type { Formatter, Formatters } from '../../types/formatter.js';
import type { RpcTransactionRequest } from '../../types/rpc.js';
import type { TransactionRequest } from '../../types/transaction.js';
import { type ExtractFormatter, type Formatted } from './format.js';
export type TransactionRequestFormatter<TChain extends Chain | undefined = Chain> = TChain extends Chain ? ExtractFormatter<TChain, 'transactionRequest', NonNullable<Formatters['transactionRequest']>> : Formatters['transactionRequest'];
export type FormattedTransactionRequest<TFormatter extends Formatter | undefined = Formatter> = Formatted<TFormatter, RpcTransactionRequest>;
export declare function formatTransactionRequest(transactionRequest: Partial<TransactionRequest>): RpcTransactionRequest;
export declare const defineTransactionRequest: <TFormat extends Formatter<Partial<TransactionRequest>, Partial<RpcTransactionRequest> & {
    [key: string]: unknown;
}>, TExclude extends ("value" | "from" | "gas" | "nonce" | "to" | "gasPrice" | "maxFeePerGas" | "maxPriorityFeePerGas" | "accessList" | "data")[] = []>({ exclude, format: formatOverride, }: {
    exclude?: TExclude | undefined;
    format?: TFormat | undefined;
}) => (data: Partial<TransactionRequest> & {
    [key: string]: unknown;
}) => RpcTransactionRequest & ReturnType<TFormat> & { [K in TExclude[number]]: never; };
//# sourceMappingURL=transactionRequest.d.ts.map