import type { Chain } from '../../types/chain.js';
import type { Formatter, Formatters } from '../../types/formatter.js';
import type { RpcTransactionReceipt } from '../../types/rpc.js';
import type { TransactionReceipt } from '../../types/transaction.js';
import { type ExtractFormatter, type Formatted } from './format.js';
export type TransactionReceiptFormatter<TChain extends Chain | undefined = Chain> = TChain extends Chain ? ExtractFormatter<TChain, 'transactionReceipt', NonNullable<Formatters['transactionReceipt']>> : Formatters['transactionReceipt'];
export type FormattedTransactionReceipt<TFormatter extends Formatter | undefined = Formatter> = Formatted<TFormatter, TransactionReceipt>;
export declare function formatTransactionReceipt(transactionReceipt: Partial<RpcTransactionReceipt>): TransactionReceipt;
export declare const defineTransactionReceipt: <TFormat extends Formatter<Partial<RpcTransactionReceipt>, Partial<TransactionReceipt> & {
    [key: string]: unknown;
}>, TExclude extends (keyof RpcTransactionReceipt)[] = []>({ exclude, format: formatOverride, }: {
    exclude?: TExclude | undefined;
    format?: TFormat | undefined;
}) => (data: Partial<RpcTransactionReceipt> & {
    [key: string]: unknown;
}) => TransactionReceipt & ReturnType<TFormat> & { [K in TExclude[number]]: never; };
//# sourceMappingURL=transactionReceipt.d.ts.map