/// <reference types="ws" />
import type { WebSocket } from 'isomorphic-ws';
type SuccessResult<T> = {
    method?: never;
    result: T;
    error?: never;
};
type ErrorResult<T> = {
    method?: never;
    result?: never;
    error: T;
};
type Subscription<TResult, TError> = {
    method: 'eth_subscription';
    error?: never;
    result?: never;
    params: {
        subscription: string;
    } & ({
        result: TResult;
        error?: never;
    } | {
        result?: never;
        error: TError;
    });
};
type RpcRequest = {
    method: string;
    params?: any;
};
export type RpcResponse<TResult = any, TError = any> = {
    jsonrpc: `${number}`;
    id: number;
} & (SuccessResult<TResult> | ErrorResult<TError> | Subscription<TResult, TError>);
export type HttpOptions = {
    body: RpcRequest;
    fetchOptions?: Omit<RequestInit, 'body'>;
    timeout?: number;
};
declare function http(url: string, { body, fetchOptions, timeout }: HttpOptions): Promise<RpcResponse<any, any>>;
type Id = string | number;
type CallbackFn = (message: any) => void;
type CallbackMap = Map<Id, CallbackFn>;
export type Socket = WebSocket & {
    requests: CallbackMap;
    subscriptions: CallbackMap;
};
export declare function getSocket(url_: string): Promise<Socket>;
declare function webSocket(socket: Socket, { body, onData, onError, }: {
    body: RpcRequest;
    onData?: (message: RpcResponse) => void;
    onError?: (message: RpcResponse['error']) => void;
}): Socket;
declare function webSocketAsync(socket: Socket, { body, timeout, }: {
    body: RpcRequest;
    timeout?: number;
}): Promise<RpcResponse<any, any>>;
export declare const rpc: {
    http: typeof http;
    webSocket: typeof webSocket;
    webSocketAsync: typeof webSocketAsync;
};
export {};
//# sourceMappingURL=rpc.d.ts.map