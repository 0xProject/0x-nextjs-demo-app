import type { PublicClient } from '../../clients/createPublicClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { Chain } from '../../types/chain.js';
import type { Requests } from '../../types/eip1193.js';
import type { Hex } from '../../types/misc.js';
type CreateFilterRequestScopeParameters = {
    method: 'eth_newFilter' | 'eth_newPendingTransactionFilter' | 'eth_newBlockFilter';
};
type CreateFilterRequestScopeReturnType = (id: Hex) => Requests['request'];
/**
 * Scopes `request` to the filter ID. If the client is a fallback, it will
 * listen for responses and scope the child transport `request` function
 * to the successful filter ID.
 */
export declare function createFilterRequestScope<TChain extends Chain | undefined>(client: PublicClient<Transport, TChain>, { method }: CreateFilterRequestScopeParameters): CreateFilterRequestScopeReturnType;
export {};
//# sourceMappingURL=createFilterRequestScope.d.ts.map