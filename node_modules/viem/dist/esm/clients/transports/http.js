import { UrlRequiredError } from '../../errors/transport.js';
import { rpc } from '../../utils/rpc.js';
import { createTransport, } from './createTransport.js';
export function http(url, config = {}) {
    const { fetchOptions, key = 'http', name = 'HTTP JSON-RPC', retryDelay, } = config;
    return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
        const retryCount = config.retryCount ?? retryCount_;
        const timeout = timeout_ ?? config.timeout ?? 10000;
        const url_ = url || chain?.rpcUrls.default.http[0];
        if (!url_)
            throw new UrlRequiredError();
        return createTransport({
            key,
            name,
            async request({ method, params }) {
                const { result } = await rpc.http(url_, {
                    body: {
                        method,
                        params,
                    },
                    fetchOptions,
                    timeout,
                });
                return result;
            },
            retryCount,
            retryDelay,
            timeout,
            type: 'http',
        }, {
            url,
        });
    };
}
//# sourceMappingURL=http.js.map