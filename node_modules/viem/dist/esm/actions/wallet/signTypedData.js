import { parseAccount } from '../../accounts/utils/parseAccount.js';
import { AccountNotFoundError } from '../../errors/account.js';
import { isHex } from '../../utils/data/isHex.js';
import { stringify } from '../../utils/stringify.js';
import { validateTypedData } from '../../utils/typedData.js';
export async function signTypedData(client, { account: account_ = client.account, domain, message, primaryType, types: types_, }) {
    if (!account_)
        throw new AccountNotFoundError({
            docsPath: '/docs/actions/wallet/signTypedData',
        });
    const account = parseAccount(account_);
    const types = {
        EIP712Domain: [
            domain?.name && { name: 'name', type: 'string' },
            domain?.version && { name: 'version', type: 'string' },
            domain?.chainId && { name: 'chainId', type: 'uint256' },
            domain?.verifyingContract && {
                name: 'verifyingContract',
                type: 'address',
            },
            domain?.salt && { name: 'salt', type: 'bytes32' },
        ].filter(Boolean),
        ...types_,
    };
    validateTypedData({
        domain,
        message,
        primaryType,
        types,
    });
    if (account.type === 'local')
        return account.signTypedData({
            domain,
            primaryType,
            types,
            message,
        });
    const typedData = stringify({ domain: domain ?? {}, primaryType, types, message }, (_, value) => (isHex(value) ? value.toLowerCase() : value));
    return client.request({
        method: 'eth_signTypedData_v4',
        params: [account.address, typedData],
    });
}
//# sourceMappingURL=signTypedData.js.map