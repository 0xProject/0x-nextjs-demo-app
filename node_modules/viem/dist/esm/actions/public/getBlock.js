import { BlockNotFoundError } from '../../errors/block.js';
import { numberToHex } from '../../utils/encoding/toHex.js';
import { formatBlock, } from '../../utils/formatters/block.js';
import { format } from '../../utils/formatters/format.js';
export async function getBlock(client, { blockHash, blockNumber, blockTag = 'latest', includeTransactions = false, } = {}) {
    const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;
    let block = null;
    if (blockHash) {
        block = await client.request({
            method: 'eth_getBlockByHash',
            params: [blockHash, includeTransactions],
        });
    }
    else {
        block = await client.request({
            method: 'eth_getBlockByNumber',
            params: [blockNumberHex || blockTag, includeTransactions],
        });
    }
    if (!block)
        throw new BlockNotFoundError({ blockHash, blockNumber });
    return format(block, {
        formatter: client.chain?.formatters?.block || formatBlock,
    });
}
//# sourceMappingURL=getBlock.js.map