import { encodeEventTopics, } from '../../utils/abi/encodeEventTopics.js';
import { numberToHex } from '../../utils/encoding/toHex.js';
import { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js';
export async function createEventFilter(client, { address, args, event, fromBlock, toBlock, } = {}) {
    const getRequest = createFilterRequestScope(client, {
        method: 'eth_newFilter',
    });
    let topics = [];
    if (event)
        topics = encodeEventTopics({
            abi: [event],
            eventName: event.name,
            args,
        });
    const id = await client.request({
        method: 'eth_newFilter',
        params: [
            {
                address,
                fromBlock: typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,
                toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,
                ...(topics.length ? { topics } : {}),
            },
        ],
    });
    return {
        abi: event ? [event] : undefined,
        args,
        eventName: event ? event.name : undefined,
        id,
        request: getRequest(id),
        type: 'event',
    };
}
//# sourceMappingURL=createEventFilter.js.map