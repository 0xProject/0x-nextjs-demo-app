import { observe } from '../../utils/observe.js';
import { poll } from '../../utils/poll.js';
import { stringify } from '../../utils/stringify.js';
import { createEventFilter, } from './createEventFilter.js';
import { getBlockNumber } from './getBlockNumber.js';
import { getFilterChanges } from './getFilterChanges.js';
import { getLogs } from './getLogs.js';
import { uninstallFilter } from './uninstallFilter.js';
export function watchEvent(client, { address, args, batch = true, event, onError, onLogs, pollingInterval = client.pollingInterval, }) {
    const observerId = stringify([
        'watchEvent',
        address,
        args,
        batch,
        client.uid,
        event,
        pollingInterval,
    ]);
    return observe(observerId, { onLogs, onError }, (emit) => {
        let previousBlockNumber;
        let filter;
        let initialized = false;
        const unwatch = poll(async () => {
            if (!initialized) {
                try {
                    filter = (await createEventFilter(client, {
                        address,
                        args,
                        event: event,
                    }));
                }
                catch { }
                initialized = true;
                return;
            }
            try {
                let logs;
                if (filter) {
                    logs = await getFilterChanges(client, { filter });
                }
                else {
                    const blockNumber = await getBlockNumber(client);
                    if (previousBlockNumber && previousBlockNumber !== blockNumber) {
                        logs = await getLogs(client, {
                            address,
                            args,
                            fromBlock: previousBlockNumber + 1n,
                            toBlock: blockNumber,
                            event: event,
                        });
                    }
                    else {
                        logs = [];
                    }
                    previousBlockNumber = blockNumber;
                }
                if (logs.length === 0)
                    return;
                if (batch)
                    emit.onLogs(logs);
                else
                    logs.forEach((log) => emit.onLogs([log]));
            }
            catch (err) {
                emit.onError?.(err);
            }
        }, {
            emitOnBegin: true,
            interval: pollingInterval,
        });
        return async () => {
            if (filter)
                await uninstallFilter(client, { filter });
            unwatch();
        };
    });
}
//# sourceMappingURL=watchEvent.js.map