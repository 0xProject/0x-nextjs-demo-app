import { parseAccount } from '../../accounts/utils/parseAccount.js';
import { AccountNotFoundError } from '../../errors/account.js';
import { numberToHex } from '../../utils/encoding/toHex.js';
import { getEstimateGasError } from '../../utils/errors/getEstimateGasError.js';
import { extract } from '../../utils/formatters/extract.js';
import { format } from '../../utils/formatters/format.js';
import { formatTransactionRequest, } from '../../utils/formatters/transactionRequest.js';
import { assertRequest } from '../../utils/transaction/assertRequest.js';
import { prepareRequest } from '../../utils/transaction/prepareRequest.js';
export async function estimateGas(client, args) {
    const account_ = args.account ?? client.account;
    if (!account_)
        throw new AccountNotFoundError({
            docsPath: '/docs/actions/public/estimateGas',
        });
    const account = parseAccount(account_);
    try {
        const { accessList, blockNumber, blockTag, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = account.type === 'local' ? await prepareRequest(client, args) : args;
        const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;
        const block = blockNumberHex || blockTag;
        assertRequest(args);
        const formatter = client.chain?.formatters?.transactionRequest;
        const request = format({
            from: account.address,
            accessList,
            data,
            gas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value,
            ...extract(rest, { formatter }),
        }, {
            formatter: formatter || formatTransactionRequest,
        });
        const balance = await client.request({
            method: 'eth_estimateGas',
            params: block ? [request, block] : [request],
        });
        return BigInt(balance);
    }
    catch (err) {
        throw getEstimateGasError(err, {
            ...args,
            account,
            chain: client.chain,
        });
    }
}
//# sourceMappingURL=estimateGas.js.map