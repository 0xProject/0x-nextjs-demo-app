import { TransactionNotFoundError } from '../../errors/transaction.js';
import { numberToHex } from '../../utils/encoding/toHex.js';
import { format } from '../../utils/formatters/format.js';
import { formatTransaction, } from '../../utils/formatters/transaction.js';
export async function getTransaction(client, { blockHash, blockNumber, blockTag = 'latest', hash, index, }) {
    const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;
    let transaction = null;
    if (hash) {
        transaction = await client.request({
            method: 'eth_getTransactionByHash',
            params: [hash],
        });
    }
    else if (blockHash) {
        transaction = await client.request({
            method: 'eth_getTransactionByBlockHashAndIndex',
            params: [blockHash, numberToHex(index)],
        });
    }
    else if (blockNumberHex || blockTag) {
        transaction = await client.request({
            method: 'eth_getTransactionByBlockNumberAndIndex',
            params: [blockNumberHex || blockTag, numberToHex(index)],
        });
    }
    if (!transaction)
        throw new TransactionNotFoundError({
            blockHash,
            blockNumber,
            blockTag,
            hash,
            index,
        });
    return format(transaction, {
        formatter: client.chain?.formatters?.transaction || formatTransaction,
    });
}
//# sourceMappingURL=getTransaction.js.map