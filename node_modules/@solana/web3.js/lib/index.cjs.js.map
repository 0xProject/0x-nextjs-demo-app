{"version":3,"file":"index.cjs.js","sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/message/account-keys.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/utils/assert.ts","../src/message/compiled-keys.ts","../src/message/legacy.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/message.ts","../src/transaction/versioned.ts","../src/timing.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../../../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js","../../../node_modules/.pnpm/humanize-ms@1.2.1/node_modules/humanize-ms/index.js","../../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js","../../../node_modules/.pnpm/debug@4.3.4_supports-color@8.1.1/node_modules/debug/src/common.js","../../../node_modules/.pnpm/debug@4.3.4_supports-color@8.1.1/node_modules/debug/src/browser.js","../../../node_modules/.pnpm/supports-color@8.1.1/node_modules/supports-color/browser.js","../../../node_modules/.pnpm/debug@4.3.4_supports-color@8.1.1/node_modules/debug/src/node.js","../../../node_modules/.pnpm/debug@4.3.4_supports-color@8.1.1/node_modules/debug/src/index.js","../../../node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/callsite-tostring.js","../../../node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/event-listener-count.js","../../../node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/index.js","../../../node_modules/.pnpm/depd@1.1.2/node_modules/depd/index.js","../../../node_modules/.pnpm/agentkeepalive@4.2.1/node_modules/agentkeepalive/lib/constants.js","../../../node_modules/.pnpm/agentkeepalive@4.2.1/node_modules/agentkeepalive/lib/agent.js","../../../node_modules/.pnpm/agentkeepalive@4.2.1/node_modules/agentkeepalive/lib/https_agent.js","../../../node_modules/.pnpm/agentkeepalive@4.2.1/node_modules/agentkeepalive/index.js","../../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/fetch-impl.ts","../src/rpc-websocket.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      };\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","/*!\n * humanize-ms - index.js\n * Copyright(c) 2014 dead_horse <dead_horse@qq.com>\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar ms = require('ms');\n\nmodule.exports = function (t) {\n  if (typeof t === 'number') return t;\n  var r = ms(t);\n  if (r === undefined) {\n    var err = new Error(util.format('humanize-ms(%j) result undefined', t));\n    console.warn(err.stack);\n  }\n  return r;\n};\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","/* eslint-env browser */\n'use strict';\n\nfunction getChromeVersion() {\n\tconst matches = /(Chrome|Chromium)\\/(?<chromeVersion>\\d+)\\./.exec(navigator.userAgent);\n\n\tif (!matches) {\n\t\treturn;\n\t}\n\n\treturn Number.parseInt(matches.groups.chromeVersion, 10);\n}\n\nconst colorSupport = getChromeVersion() >= 69 ? {\n\tlevel: 1,\n\thasBasic: true,\n\thas256: false,\n\thas16m: false\n} : false;\n\nmodule.exports = {\n\tstdout: colorSupport,\n\tstderr: colorSupport\n};\n","/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n","/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n","/*!\n * depd\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = callSiteToString\n\n/**\n * Format a CallSite file location to a string.\n */\n\nfunction callSiteFileLocation (callSite) {\n  var fileName\n  var fileLocation = ''\n\n  if (callSite.isNative()) {\n    fileLocation = 'native'\n  } else if (callSite.isEval()) {\n    fileName = callSite.getScriptNameOrSourceURL()\n    if (!fileName) {\n      fileLocation = callSite.getEvalOrigin()\n    }\n  } else {\n    fileName = callSite.getFileName()\n  }\n\n  if (fileName) {\n    fileLocation += fileName\n\n    var lineNumber = callSite.getLineNumber()\n    if (lineNumber != null) {\n      fileLocation += ':' + lineNumber\n\n      var columnNumber = callSite.getColumnNumber()\n      if (columnNumber) {\n        fileLocation += ':' + columnNumber\n      }\n    }\n  }\n\n  return fileLocation || 'unknown source'\n}\n\n/**\n * Format a CallSite to a string.\n */\n\nfunction callSiteToString (callSite) {\n  var addSuffix = true\n  var fileLocation = callSiteFileLocation(callSite)\n  var functionName = callSite.getFunctionName()\n  var isConstructor = callSite.isConstructor()\n  var isMethodCall = !(callSite.isToplevel() || isConstructor)\n  var line = ''\n\n  if (isMethodCall) {\n    var methodName = callSite.getMethodName()\n    var typeName = getConstructorName(callSite)\n\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) !== 0) {\n        line += typeName + '.'\n      }\n\n      line += functionName\n\n      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {\n        line += ' [as ' + methodName + ']'\n      }\n    } else {\n      line += typeName + '.' + (methodName || '<anonymous>')\n    }\n  } else if (isConstructor) {\n    line += 'new ' + (functionName || '<anonymous>')\n  } else if (functionName) {\n    line += functionName\n  } else {\n    addSuffix = false\n    line += fileLocation\n  }\n\n  if (addSuffix) {\n    line += ' (' + fileLocation + ')'\n  }\n\n  return line\n}\n\n/**\n * Get constructor name of reviver.\n */\n\nfunction getConstructorName (obj) {\n  var receiver = obj.receiver\n  return (receiver.constructor && receiver.constructor.name) || null\n}\n","/*!\n * depd\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = eventListenerCount\n\n/**\n * Get the count of listeners on an event emitter of a specific type.\n */\n\nfunction eventListenerCount (emitter, type) {\n  return emitter.listeners(type).length\n}\n","/*!\n * depd\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar EventEmitter = require('events').EventEmitter\n\n/**\n * Module exports.\n * @public\n */\n\nlazyProperty(module.exports, 'callSiteToString', function callSiteToString () {\n  var limit = Error.stackTraceLimit\n  var obj = {}\n  var prep = Error.prepareStackTrace\n\n  function prepareObjectStackTrace (obj, stack) {\n    return stack\n  }\n\n  Error.prepareStackTrace = prepareObjectStackTrace\n  Error.stackTraceLimit = 2\n\n  // capture the stack\n  Error.captureStackTrace(obj)\n\n  // slice the stack\n  var stack = obj.stack.slice()\n\n  Error.prepareStackTrace = prep\n  Error.stackTraceLimit = limit\n\n  return stack[0].toString ? toString : require('./callsite-tostring')\n})\n\nlazyProperty(module.exports, 'eventListenerCount', function eventListenerCount () {\n  return EventEmitter.listenerCount || require('./event-listener-count')\n})\n\n/**\n * Define a lazy property.\n */\n\nfunction lazyProperty (obj, prop, getter) {\n  function get () {\n    var val = getter()\n\n    Object.defineProperty(obj, prop, {\n      configurable: true,\n      enumerable: true,\n      value: val\n    })\n\n    return val\n  }\n\n  Object.defineProperty(obj, prop, {\n    configurable: true,\n    enumerable: true,\n    get: get\n  })\n}\n\n/**\n * Call toString() on the obj\n */\n\nfunction toString (obj) {\n  return obj.toString()\n}\n","/*!\n * depd\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar callSiteToString = require('./lib/compat').callSiteToString\nvar eventListenerCount = require('./lib/compat').eventListenerCount\nvar relative = require('path').relative\n\n/**\n * Module exports.\n */\n\nmodule.exports = depd\n\n/**\n * Get the path to base files on.\n */\n\nvar basePath = process.cwd()\n\n/**\n * Determine if namespace is contained in the string.\n */\n\nfunction containsNamespace (str, namespace) {\n  var vals = str.split(/[ ,]+/)\n  var ns = String(namespace).toLowerCase()\n\n  for (var i = 0; i < vals.length; i++) {\n    var val = vals[i]\n\n    // namespace contained\n    if (val && (val === '*' || val.toLowerCase() === ns)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Convert a data descriptor to accessor descriptor.\n */\n\nfunction convertDataDescriptorToAccessor (obj, prop, message) {\n  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)\n  var value = descriptor.value\n\n  descriptor.get = function getter () { return value }\n\n  if (descriptor.writable) {\n    descriptor.set = function setter (val) { return (value = val) }\n  }\n\n  delete descriptor.value\n  delete descriptor.writable\n\n  Object.defineProperty(obj, prop, descriptor)\n\n  return descriptor\n}\n\n/**\n * Create arguments string to keep arity.\n */\n\nfunction createArgumentsString (arity) {\n  var str = ''\n\n  for (var i = 0; i < arity; i++) {\n    str += ', arg' + i\n  }\n\n  return str.substr(2)\n}\n\n/**\n * Create stack string from stack.\n */\n\nfunction createStackString (stack) {\n  var str = this.name + ': ' + this.namespace\n\n  if (this.message) {\n    str += ' deprecated ' + this.message\n  }\n\n  for (var i = 0; i < stack.length; i++) {\n    str += '\\n    at ' + callSiteToString(stack[i])\n  }\n\n  return str\n}\n\n/**\n * Create deprecate for namespace in caller.\n */\n\nfunction depd (namespace) {\n  if (!namespace) {\n    throw new TypeError('argument namespace is required')\n  }\n\n  var stack = getStack()\n  var site = callSiteLocation(stack[1])\n  var file = site[0]\n\n  function deprecate (message) {\n    // call to self as log\n    log.call(deprecate, message)\n  }\n\n  deprecate._file = file\n  deprecate._ignored = isignored(namespace)\n  deprecate._namespace = namespace\n  deprecate._traced = istraced(namespace)\n  deprecate._warned = Object.create(null)\n\n  deprecate.function = wrapfunction\n  deprecate.property = wrapproperty\n\n  return deprecate\n}\n\n/**\n * Determine if namespace is ignored.\n */\n\nfunction isignored (namespace) {\n  /* istanbul ignore next: tested in a child processs */\n  if (process.noDeprecation) {\n    // --no-deprecation support\n    return true\n  }\n\n  var str = process.env.NO_DEPRECATION || ''\n\n  // namespace ignored\n  return containsNamespace(str, namespace)\n}\n\n/**\n * Determine if namespace is traced.\n */\n\nfunction istraced (namespace) {\n  /* istanbul ignore next: tested in a child processs */\n  if (process.traceDeprecation) {\n    // --trace-deprecation support\n    return true\n  }\n\n  var str = process.env.TRACE_DEPRECATION || ''\n\n  // namespace traced\n  return containsNamespace(str, namespace)\n}\n\n/**\n * Display deprecation message.\n */\n\nfunction log (message, site) {\n  var haslisteners = eventListenerCount(process, 'deprecation') !== 0\n\n  // abort early if no destination\n  if (!haslisteners && this._ignored) {\n    return\n  }\n\n  var caller\n  var callFile\n  var callSite\n  var depSite\n  var i = 0\n  var seen = false\n  var stack = getStack()\n  var file = this._file\n\n  if (site) {\n    // provided site\n    depSite = site\n    callSite = callSiteLocation(stack[1])\n    callSite.name = depSite.name\n    file = callSite[0]\n  } else {\n    // get call site\n    i = 2\n    depSite = callSiteLocation(stack[i])\n    callSite = depSite\n  }\n\n  // get caller of deprecated thing in relation to file\n  for (; i < stack.length; i++) {\n    caller = callSiteLocation(stack[i])\n    callFile = caller[0]\n\n    if (callFile === file) {\n      seen = true\n    } else if (callFile === this._file) {\n      file = this._file\n    } else if (seen) {\n      break\n    }\n  }\n\n  var key = caller\n    ? depSite.join(':') + '__' + caller.join(':')\n    : undefined\n\n  if (key !== undefined && key in this._warned) {\n    // already warned\n    return\n  }\n\n  this._warned[key] = true\n\n  // generate automatic message from call site\n  var msg = message\n  if (!msg) {\n    msg = callSite === depSite || !callSite.name\n      ? defaultMessage(depSite)\n      : defaultMessage(callSite)\n  }\n\n  // emit deprecation if listeners exist\n  if (haslisteners) {\n    var err = DeprecationError(this._namespace, msg, stack.slice(i))\n    process.emit('deprecation', err)\n    return\n  }\n\n  // format and write message\n  var format = process.stderr.isTTY\n    ? formatColor\n    : formatPlain\n  var output = format.call(this, msg, caller, stack.slice(i))\n  process.stderr.write(output + '\\n', 'utf8')\n}\n\n/**\n * Get call site location as array.\n */\n\nfunction callSiteLocation (callSite) {\n  var file = callSite.getFileName() || '<anonymous>'\n  var line = callSite.getLineNumber()\n  var colm = callSite.getColumnNumber()\n\n  if (callSite.isEval()) {\n    file = callSite.getEvalOrigin() + ', ' + file\n  }\n\n  var site = [file, line, colm]\n\n  site.callSite = callSite\n  site.name = callSite.getFunctionName()\n\n  return site\n}\n\n/**\n * Generate a default message from the site.\n */\n\nfunction defaultMessage (site) {\n  var callSite = site.callSite\n  var funcName = site.name\n\n  // make useful anonymous name\n  if (!funcName) {\n    funcName = '<anonymous@' + formatLocation(site) + '>'\n  }\n\n  var context = callSite.getThis()\n  var typeName = context && callSite.getTypeName()\n\n  // ignore useless type name\n  if (typeName === 'Object') {\n    typeName = undefined\n  }\n\n  // make useful type name\n  if (typeName === 'Function') {\n    typeName = context.name || typeName\n  }\n\n  return typeName && callSite.getMethodName()\n    ? typeName + '.' + funcName\n    : funcName\n}\n\n/**\n * Format deprecation message without color.\n */\n\nfunction formatPlain (msg, caller, stack) {\n  var timestamp = new Date().toUTCString()\n\n  var formatted = timestamp +\n    ' ' + this._namespace +\n    ' deprecated ' + msg\n\n  // add stack trace\n  if (this._traced) {\n    for (var i = 0; i < stack.length; i++) {\n      formatted += '\\n    at ' + callSiteToString(stack[i])\n    }\n\n    return formatted\n  }\n\n  if (caller) {\n    formatted += ' at ' + formatLocation(caller)\n  }\n\n  return formatted\n}\n\n/**\n * Format deprecation message with color.\n */\n\nfunction formatColor (msg, caller, stack) {\n  var formatted = '\\x1b[36;1m' + this._namespace + '\\x1b[22;39m' + // bold cyan\n    ' \\x1b[33;1mdeprecated\\x1b[22;39m' + // bold yellow\n    ' \\x1b[0m' + msg + '\\x1b[39m' // reset\n\n  // add stack trace\n  if (this._traced) {\n    for (var i = 0; i < stack.length; i++) {\n      formatted += '\\n    \\x1b[36mat ' + callSiteToString(stack[i]) + '\\x1b[39m' // cyan\n    }\n\n    return formatted\n  }\n\n  if (caller) {\n    formatted += ' \\x1b[36m' + formatLocation(caller) + '\\x1b[39m' // cyan\n  }\n\n  return formatted\n}\n\n/**\n * Format call site location.\n */\n\nfunction formatLocation (callSite) {\n  return relative(basePath, callSite[0]) +\n    ':' + callSite[1] +\n    ':' + callSite[2]\n}\n\n/**\n * Get the stack as array of call sites.\n */\n\nfunction getStack () {\n  var limit = Error.stackTraceLimit\n  var obj = {}\n  var prep = Error.prepareStackTrace\n\n  Error.prepareStackTrace = prepareObjectStackTrace\n  Error.stackTraceLimit = Math.max(10, limit)\n\n  // capture the stack\n  Error.captureStackTrace(obj)\n\n  // slice this function off the top\n  var stack = obj.stack.slice(1)\n\n  Error.prepareStackTrace = prep\n  Error.stackTraceLimit = limit\n\n  return stack\n}\n\n/**\n * Capture call site stack from v8.\n */\n\nfunction prepareObjectStackTrace (obj, stack) {\n  return stack\n}\n\n/**\n * Return a wrapped function in a deprecation message.\n */\n\nfunction wrapfunction (fn, message) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('argument fn must be a function')\n  }\n\n  var args = createArgumentsString(fn.length)\n  var deprecate = this // eslint-disable-line no-unused-vars\n  var stack = getStack()\n  var site = callSiteLocation(stack[1])\n\n  site.name = fn.name\n\n   // eslint-disable-next-line no-eval\n  var deprecatedfn = eval('(function (' + args + ') {\\n' +\n    '\"use strict\"\\n' +\n    'log.call(deprecate, message, site)\\n' +\n    'return fn.apply(this, arguments)\\n' +\n    '})')\n\n  return deprecatedfn\n}\n\n/**\n * Wrap property in a deprecation message.\n */\n\nfunction wrapproperty (obj, prop, message) {\n  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    throw new TypeError('argument obj must be object')\n  }\n\n  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)\n\n  if (!descriptor) {\n    throw new TypeError('must call property on owner object')\n  }\n\n  if (!descriptor.configurable) {\n    throw new TypeError('property must be configurable')\n  }\n\n  var deprecate = this\n  var stack = getStack()\n  var site = callSiteLocation(stack[1])\n\n  // set site name\n  site.name = prop\n\n  // convert data descriptor\n  if ('value' in descriptor) {\n    descriptor = convertDataDescriptorToAccessor(obj, prop, message)\n  }\n\n  var get = descriptor.get\n  var set = descriptor.set\n\n  // wrap getter\n  if (typeof get === 'function') {\n    descriptor.get = function getter () {\n      log.call(deprecate, message, site)\n      return get.apply(this, arguments)\n    }\n  }\n\n  // wrap setter\n  if (typeof set === 'function') {\n    descriptor.set = function setter () {\n      log.call(deprecate, message, site)\n      return set.apply(this, arguments)\n    }\n  }\n\n  Object.defineProperty(obj, prop, descriptor)\n}\n\n/**\n * Create DeprecationError for deprecation\n */\n\nfunction DeprecationError (namespace, message, stack) {\n  var error = new Error()\n  var stackString\n\n  Object.defineProperty(error, 'constructor', {\n    value: DeprecationError\n  })\n\n  Object.defineProperty(error, 'message', {\n    configurable: true,\n    enumerable: false,\n    value: message,\n    writable: true\n  })\n\n  Object.defineProperty(error, 'name', {\n    enumerable: false,\n    configurable: true,\n    value: 'DeprecationError',\n    writable: true\n  })\n\n  Object.defineProperty(error, 'namespace', {\n    configurable: true,\n    enumerable: false,\n    value: namespace,\n    writable: true\n  })\n\n  Object.defineProperty(error, 'stack', {\n    configurable: true,\n    enumerable: false,\n    get: function () {\n      if (stackString !== undefined) {\n        return stackString\n      }\n\n      // prepare stack trace\n      return (stackString = createStackString.call(this, stack))\n    },\n    set: function setter (val) {\n      stackString = val\n    }\n  })\n\n  return error\n}\n","'use strict';\n\nmodule.exports = {\n  // agent\n  CURRENT_ID: Symbol('agentkeepalive#currentId'),\n  CREATE_ID: Symbol('agentkeepalive#createId'),\n  INIT_SOCKET: Symbol('agentkeepalive#initSocket'),\n  CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),\n  // socket\n  SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),\n  SOCKET_NAME: Symbol('agentkeepalive#socketName'),\n  SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),\n  SOCKET_REQUEST_FINISHED_COUNT: Symbol('agentkeepalive#socketRequestFinishedCount'),\n};\n","'use strict';\n\nconst OriginalAgent = require('http').Agent;\nconst ms = require('humanize-ms');\nconst debug = require('debug')('agentkeepalive');\nconst deprecate = require('depd')('agentkeepalive');\nconst {\n  INIT_SOCKET,\n  CURRENT_ID,\n  CREATE_ID,\n  SOCKET_CREATED_TIME,\n  SOCKET_NAME,\n  SOCKET_REQUEST_COUNT,\n  SOCKET_REQUEST_FINISHED_COUNT,\n} = require('./constants');\n\n// OriginalAgent come from\n// - https://github.com/nodejs/node/blob/v8.12.0/lib/_http_agent.js\n// - https://github.com/nodejs/node/blob/v10.12.0/lib/_http_agent.js\n\n// node <= 10\nlet defaultTimeoutListenerCount = 1;\nconst majorVersion = parseInt(process.version.split('.', 1)[0].substring(1));\nif (majorVersion >= 11 && majorVersion <= 12) {\n  defaultTimeoutListenerCount = 2;\n} else if (majorVersion >= 13) {\n  defaultTimeoutListenerCount = 3;\n}\n\nclass Agent extends OriginalAgent {\n  constructor(options) {\n    options = options || {};\n    options.keepAlive = options.keepAlive !== false;\n    // default is keep-alive and 4s free socket timeout\n    // see https://medium.com/ssense-tech/reduce-networking-errors-in-nodejs-23b4eb9f2d83\n    if (options.freeSocketTimeout === undefined) {\n      options.freeSocketTimeout = 4000;\n    }\n    // Legacy API: keepAliveTimeout should be rename to `freeSocketTimeout`\n    if (options.keepAliveTimeout) {\n      deprecate('options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n      options.freeSocketTimeout = options.keepAliveTimeout;\n      delete options.keepAliveTimeout;\n    }\n    // Legacy API: freeSocketKeepAliveTimeout should be rename to `freeSocketTimeout`\n    if (options.freeSocketKeepAliveTimeout) {\n      deprecate('options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n      options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;\n      delete options.freeSocketKeepAliveTimeout;\n    }\n\n    // Sets the socket to timeout after timeout milliseconds of inactivity on the socket.\n    // By default is double free socket timeout.\n    if (options.timeout === undefined) {\n      // make sure socket default inactivity timeout >= 8s\n      options.timeout = Math.max(options.freeSocketTimeout * 2, 8000);\n    }\n\n    // support humanize format\n    options.timeout = ms(options.timeout);\n    options.freeSocketTimeout = ms(options.freeSocketTimeout);\n    options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;\n\n    super(options);\n\n    this[CURRENT_ID] = 0;\n\n    // create socket success counter\n    this.createSocketCount = 0;\n    this.createSocketCountLastCheck = 0;\n\n    this.createSocketErrorCount = 0;\n    this.createSocketErrorCountLastCheck = 0;\n\n    this.closeSocketCount = 0;\n    this.closeSocketCountLastCheck = 0;\n\n    // socket error event count\n    this.errorSocketCount = 0;\n    this.errorSocketCountLastCheck = 0;\n\n    // request finished counter\n    this.requestCount = 0;\n    this.requestCountLastCheck = 0;\n\n    // including free socket timeout counter\n    this.timeoutSocketCount = 0;\n    this.timeoutSocketCountLastCheck = 0;\n\n    this.on('free', socket => {\n      // https://github.com/nodejs/node/pull/32000\n      // Node.js native agent will check socket timeout eqs agent.options.timeout.\n      // Use the ttl or freeSocketTimeout to overwrite.\n      const timeout = this.calcSocketTimeout(socket);\n      if (timeout > 0 && socket.timeout !== timeout) {\n        socket.setTimeout(timeout);\n      }\n    });\n  }\n\n  get freeSocketKeepAliveTimeout() {\n    deprecate('agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead');\n    return this.options.freeSocketTimeout;\n  }\n\n  get timeout() {\n    deprecate('agent.timeout is deprecated, please use agent.options.timeout instead');\n    return this.options.timeout;\n  }\n\n  get socketActiveTTL() {\n    deprecate('agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead');\n    return this.options.socketActiveTTL;\n  }\n\n  calcSocketTimeout(socket) {\n    /**\n     * return <= 0: should free socket\n     * return > 0: should update socket timeout\n     * return undefined: not find custom timeout\n     */\n    let freeSocketTimeout = this.options.freeSocketTimeout;\n    const socketActiveTTL = this.options.socketActiveTTL;\n    if (socketActiveTTL) {\n      // check socketActiveTTL\n      const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];\n      const diff = socketActiveTTL - aliveTime;\n      if (diff <= 0) {\n        return diff;\n      }\n      if (freeSocketTimeout && diff < freeSocketTimeout) {\n        freeSocketTimeout = diff;\n      }\n    }\n    // set freeSocketTimeout\n    if (freeSocketTimeout) {\n      // set free keepalive timer\n      // try to use socket custom freeSocketTimeout first, support headers['keep-alive']\n      // https://github.com/node-modules/urllib/blob/b76053020923f4d99a1c93cf2e16e0c5ba10bacf/lib/urllib.js#L498\n      const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;\n      return customFreeSocketTimeout || freeSocketTimeout;\n    }\n  }\n\n  keepSocketAlive(socket) {\n    const result = super.keepSocketAlive(socket);\n    // should not keepAlive, do nothing\n    if (!result) return result;\n\n    const customTimeout = this.calcSocketTimeout(socket);\n    if (typeof customTimeout === 'undefined') {\n      return true;\n    }\n    if (customTimeout <= 0) {\n      debug('%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], customTimeout);\n      return false;\n    }\n    if (socket.timeout !== customTimeout) {\n      socket.setTimeout(customTimeout);\n    }\n    return true;\n  }\n\n  // only call on addRequest\n  reuseSocket(...args) {\n    // reuseSocket(socket, req)\n    super.reuseSocket(...args);\n    const socket = args[0];\n    const req = args[1];\n    req.reusedSocket = true;\n    const agentTimeout = this.options.timeout;\n    if (getSocketTimeout(socket) !== agentTimeout) {\n      // reset timeout before use\n      socket.setTimeout(agentTimeout);\n      debug('%s reset timeout to %sms', socket[SOCKET_NAME], agentTimeout);\n    }\n    socket[SOCKET_REQUEST_COUNT]++;\n    debug('%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      getSocketTimeout(socket));\n  }\n\n  [CREATE_ID]() {\n    const id = this[CURRENT_ID]++;\n    if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER) this[CURRENT_ID] = 0;\n    return id;\n  }\n\n  [INIT_SOCKET](socket, options) {\n    // bugfix here.\n    // https on node 8, 10 won't set agent.options.timeout by default\n    // TODO: need to fix on node itself\n    if (options.timeout) {\n      const timeout = getSocketTimeout(socket);\n      if (!timeout) {\n        socket.setTimeout(options.timeout);\n      }\n    }\n\n    if (this.options.keepAlive) {\n      // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/\n      // https://fengmk2.com/benchmark/nagle-algorithm-delayed-ack-mock.html\n      socket.setNoDelay(true);\n    }\n    this.createSocketCount++;\n    if (this.options.socketActiveTTL) {\n      socket[SOCKET_CREATED_TIME] = Date.now();\n    }\n    // don't show the hole '-----BEGIN CERTIFICATE----' key string\n    socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split('-----BEGIN', 1)[0];\n    socket[SOCKET_REQUEST_COUNT] = 1;\n    socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;\n    installListeners(this, socket, options);\n  }\n\n  createConnection(options, oncreate) {\n    let called = false;\n    const onNewCreate = (err, socket) => {\n      if (called) return;\n      called = true;\n\n      if (err) {\n        this.createSocketErrorCount++;\n        return oncreate(err);\n      }\n      this[INIT_SOCKET](socket, options);\n      oncreate(err, socket);\n    };\n\n    const newSocket = super.createConnection(options, onNewCreate);\n    if (newSocket) onNewCreate(null, newSocket);\n  }\n\n  get statusChanged() {\n    const changed = this.createSocketCount !== this.createSocketCountLastCheck ||\n      this.createSocketErrorCount !== this.createSocketErrorCountLastCheck ||\n      this.closeSocketCount !== this.closeSocketCountLastCheck ||\n      this.errorSocketCount !== this.errorSocketCountLastCheck ||\n      this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||\n      this.requestCount !== this.requestCountLastCheck;\n    if (changed) {\n      this.createSocketCountLastCheck = this.createSocketCount;\n      this.createSocketErrorCountLastCheck = this.createSocketErrorCount;\n      this.closeSocketCountLastCheck = this.closeSocketCount;\n      this.errorSocketCountLastCheck = this.errorSocketCount;\n      this.timeoutSocketCountLastCheck = this.timeoutSocketCount;\n      this.requestCountLastCheck = this.requestCount;\n    }\n    return changed;\n  }\n\n  getCurrentStatus() {\n    return {\n      createSocketCount: this.createSocketCount,\n      createSocketErrorCount: this.createSocketErrorCount,\n      closeSocketCount: this.closeSocketCount,\n      errorSocketCount: this.errorSocketCount,\n      timeoutSocketCount: this.timeoutSocketCount,\n      requestCount: this.requestCount,\n      freeSockets: inspect(this.freeSockets),\n      sockets: inspect(this.sockets),\n      requests: inspect(this.requests),\n    };\n  }\n}\n\n// node 8 don't has timeout attribute on socket\n// https://github.com/nodejs/node/pull/21204/files#diff-e6ef024c3775d787c38487a6309e491dR408\nfunction getSocketTimeout(socket) {\n  return socket.timeout || socket._idleTimeout;\n}\n\nfunction installListeners(agent, socket, options) {\n  debug('%s create, timeout %sms', socket[SOCKET_NAME], getSocketTimeout(socket));\n\n  // listener socket events: close, timeout, error, free\n  function onFree() {\n    // create and socket.emit('free') logic\n    // https://github.com/nodejs/node/blob/master/lib/_http_agent.js#L311\n    // no req on the socket, it should be the new socket\n    if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1) return;\n\n    socket[SOCKET_REQUEST_FINISHED_COUNT]++;\n    agent.requestCount++;\n    debug('%s(requests: %s, finished: %s) free',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n\n    // should reuse on pedding requests?\n    const name = agent.getName(options);\n    if (socket.writable && agent.requests[name] && agent.requests[name].length) {\n      // will be reuse on agent free listener\n      socket[SOCKET_REQUEST_COUNT]++;\n      debug('%s(requests: %s, finished: %s) will be reuse on agent free event',\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n    }\n  }\n  socket.on('free', onFree);\n\n  function onClose(isError) {\n    debug('%s(requests: %s, finished: %s) close, isError: %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], isError);\n    agent.closeSocketCount++;\n  }\n  socket.on('close', onClose);\n\n  // start socket timeout handler\n  function onTimeout() {\n    // onTimeout and emitRequestTimeout(_http_client.js)\n    // https://github.com/nodejs/node/blob/v12.x/lib/_http_client.js#L711\n    const listenerCount = socket.listeners('timeout').length;\n    // node <= 10, default listenerCount is 1, onTimeout\n    // 11 < node <= 12, default listenerCount is 2, onTimeout and emitRequestTimeout\n    // node >= 13, default listenerCount is 3, onTimeout,\n    //   onTimeout(https://github.com/nodejs/node/pull/32000/files#diff-5f7fb0850412c6be189faeddea6c5359R333)\n    //   and emitRequestTimeout\n    const timeout = getSocketTimeout(socket);\n    const req = socket._httpMessage;\n    const reqTimeoutListenerCount = req && req.listeners('timeout').length || 0;\n    debug('%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      timeout, listenerCount, defaultTimeoutListenerCount, !!req, reqTimeoutListenerCount);\n    if (debug.enabled) {\n      debug('timeout listeners: %s', socket.listeners('timeout').map(f => f.name).join(', '));\n    }\n    agent.timeoutSocketCount++;\n    const name = agent.getName(options);\n    if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {\n      // free socket timeout, destroy quietly\n      socket.destroy();\n      // Remove it from freeSockets list immediately to prevent new requests\n      // from being sent through this socket.\n      agent.removeSocket(socket, options);\n      debug('%s is free, destroy quietly', socket[SOCKET_NAME]);\n    } else {\n      // if there is no any request socket timeout handler,\n      // agent need to handle socket timeout itself.\n      //\n      // custom request socket timeout handle logic must follow these rules:\n      //  1. Destroy socket first\n      //  2. Must emit socket 'agentRemove' event tell agent remove socket\n      //     from freeSockets list immediately.\n      //     Otherise you may be get 'socket hang up' error when reuse\n      //     free socket and timeout happen in the same time.\n      if (reqTimeoutListenerCount === 0) {\n        const error = new Error('Socket timeout');\n        error.code = 'ERR_SOCKET_TIMEOUT';\n        error.timeout = timeout;\n        // must manually call socket.end() or socket.destroy() to end the connection.\n        // https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_settimeout_timeout_callback\n        socket.destroy(error);\n        agent.removeSocket(socket, options);\n        debug('%s destroy with timeout error', socket[SOCKET_NAME]);\n      }\n    }\n  }\n  socket.on('timeout', onTimeout);\n\n  function onError(err) {\n    const listenerCount = socket.listeners('error').length;\n    debug('%s(requests: %s, finished: %s) error: %s, listenerCount: %s',\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n      err, listenerCount);\n    agent.errorSocketCount++;\n    if (listenerCount === 1) {\n      // if socket don't contain error event handler, don't catch it, emit it again\n      debug('%s emit uncaught error event', socket[SOCKET_NAME]);\n      socket.removeListener('error', onError);\n      socket.emit('error', err);\n    }\n  }\n  socket.on('error', onError);\n\n  function onRemove() {\n    debug('%s(requests: %s, finished: %s) agentRemove',\n      socket[SOCKET_NAME],\n      socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n    // We need this function for cases like HTTP 'upgrade'\n    // (defined by WebSockets) where we need to remove a socket from the\n    // pool because it'll be locked up indefinitely\n    socket.removeListener('close', onClose);\n    socket.removeListener('error', onError);\n    socket.removeListener('free', onFree);\n    socket.removeListener('timeout', onTimeout);\n    socket.removeListener('agentRemove', onRemove);\n  }\n  socket.on('agentRemove', onRemove);\n}\n\nmodule.exports = Agent;\n\nfunction inspect(obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = obj[key].length;\n  }\n  return res;\n}\n","'use strict';\n\nconst OriginalHttpsAgent = require('https').Agent;\nconst HttpAgent = require('./agent');\nconst {\n  INIT_SOCKET,\n  CREATE_HTTPS_CONNECTION,\n} = require('./constants');\n\nclass HttpsAgent extends HttpAgent {\n  constructor(options) {\n    super(options);\n\n    this.defaultPort = 443;\n    this.protocol = 'https:';\n    this.maxCachedSessions = this.options.maxCachedSessions;\n    /* istanbul ignore next */\n    if (this.maxCachedSessions === undefined) {\n      this.maxCachedSessions = 100;\n    }\n\n    this._sessionCache = {\n      map: {},\n      list: [],\n    };\n  }\n\n  createConnection(options) {\n    const socket = this[CREATE_HTTPS_CONNECTION](options);\n    this[INIT_SOCKET](socket, options);\n    return socket;\n  }\n}\n\n// https://github.com/nodejs/node/blob/master/lib/https.js#L89\nHttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;\n\n[\n  'getName',\n  '_getSession',\n  '_cacheSession',\n  // https://github.com/nodejs/node/pull/4982\n  '_evictSession',\n].forEach(function(method) {\n  /* istanbul ignore next */\n  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {\n    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];\n  }\n});\n\nmodule.exports = HttpsAgent;\n","'use strict';\n\nmodule.exports = require('./lib/agent');\nmodule.exports.HttpsAgent = require('./lib/https_agent');\nmodule.exports.constants = require('./lib/constants');\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import * as nodeFetch from 'node-fetch';\n\nexport * from 'node-fetch';\nexport default async function (\n  input: nodeFetch.RequestInfo,\n  init?: nodeFetch.RequestInit,\n): Promise<nodeFetch.Response> {\n  const processedInput =\n    typeof input === 'string' && input.slice(0, 2) === '//'\n      ? 'https:' + input\n      : input;\n  return await nodeFetch.default(processedInput, init);\n}\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","Symbol","toStringTag","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","require$$0","require$$1","require$$2","require$$3","INIT_SOCKET","require$$4","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","input","init","processedInput","nodeFetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","fetch","fetchImpl","agent","agentOptions","freeSocketTimeout","keepAlive","maxSockets","HttpsKeepAliveAgent","HttpKeepAliveAgent","isHttps","NodeHttpsAgent","fetchWithMiddleware","info","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify","unsafeRes","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":"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","x_google_ignoreList":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]}